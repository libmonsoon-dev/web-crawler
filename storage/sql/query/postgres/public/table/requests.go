//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Requests = newRequestsTable("public", "requests", "")

type requestsTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	WebsiteID  postgres.ColumnInteger
	ResourceID postgres.ColumnInteger
	ContentID  postgres.ColumnInteger
	Started    postgres.ColumnTimestampz
	Ended      postgres.ColumnTimestampz
	Headers    postgres.ColumnString
	StatusCode postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RequestsTable struct {
	requestsTable

	EXCLUDED requestsTable
}

// AS creates new RequestsTable with assigned alias
func (a RequestsTable) AS(alias string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RequestsTable with assigned schema name
func (a RequestsTable) FromSchema(schemaName string) *RequestsTable {
	return newRequestsTable(schemaName, a.TableName(), a.Alias())
}

func newRequestsTable(schemaName, tableName, alias string) *RequestsTable {
	return &RequestsTable{
		requestsTable: newRequestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newRequestsTableImpl("", "excluded", ""),
	}
}

func newRequestsTableImpl(schemaName, tableName, alias string) requestsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		WebsiteIDColumn  = postgres.IntegerColumn("website_id")
		ResourceIDColumn = postgres.IntegerColumn("resource_id")
		ContentIDColumn  = postgres.IntegerColumn("content_id")
		StartedColumn    = postgres.TimestampzColumn("started")
		EndedColumn      = postgres.TimestampzColumn("ended")
		HeadersColumn    = postgres.StringColumn("headers")
		StatusCodeColumn = postgres.IntegerColumn("status_code")
		allColumns       = postgres.ColumnList{IDColumn, WebsiteIDColumn, ResourceIDColumn, ContentIDColumn, StartedColumn, EndedColumn, HeadersColumn, StatusCodeColumn}
		mutableColumns   = postgres.ColumnList{WebsiteIDColumn, ResourceIDColumn, ContentIDColumn, StartedColumn, EndedColumn, HeadersColumn, StatusCodeColumn}
	)

	return requestsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		WebsiteID:  WebsiteIDColumn,
		ResourceID: ResourceIDColumn,
		ContentID:  ContentIDColumn,
		Started:    StartedColumn,
		Ended:      EndedColumn,
		Headers:    HeadersColumn,
		StatusCode: StatusCodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
